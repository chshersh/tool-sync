/// This file only holds the template that is used to generate a default .tools.toml.
use std::fmt::Write;

use crate::sync::db::build_db;

pub fn config_template() -> String {
    let mut tools: String = String::new();
    for tool in build_db().keys().cloned().collect::<Vec<String>>() {
        if let Err(e) = writeln!(tools, "# [{}]", tool) {
            crate::err::abort_suggest_issue(&format!("{}", e));
        };
    }
    // adding another hash to fil a new line before the next block
    tools.push('#');

    format!(
        r###"# This config file was generated for version {version}
#
# # tool-sync default configuration file
# https://github.com/chshersh/tool-sync
# This file was automatically generated by tool-sync
#####################################################
#
#
# store_directory = "$HOME/.local/bin"
#
# tool-sync provides native support for some of the tools without the need to configure them
# Uncomment the tools you want to have them
#
{tools}
# To add configuration for other tools these are the config options:
# [ripgrep]
#        owner     = "BurntSushi"
#        repo      = "ripgrep"
#        exe_name  = "rg"
#
#        # Uncomment to download a specific version or tag.
#        # Without this tag latest will be used
#        # tag       = "13.0.0"
#
#
# Asset name to download on linux OSes
# asset_name.linux = "x86_64-unknown-linux-musl"
#
# uncomment if you want to install on macOS as well
# asset_name.macos = "apple-darwin"
#
# uncomment if you want to install on Windows as well
# asset_name.windows = "x86_64-pc-windows-msvc""###,
        version = env!("CARGO_PKG_VERSION"),
    )
}
